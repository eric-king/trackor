@inherits FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<TaskListState> TaskListState

<MudPaper Elevation="6" Class="pa-3 ma-3 d-flex flex-column flex-grow-1 mud-background-gray rounded-lg" MaxWidth="400px" MinWidth="250px">
    <MudFocusTrap DefaultFocus="DefaultFocus.None">
        <MudCard>
            <MudCardContent>
                <MudForm @ref="_taskForm" @bind-IsValid="@_formIsValid">
                    <MudTextField @ref="_narrativeFieldRef" Label="Task" @bind-Value="_narrative" Immediate="true" OnKeyUp="SaveOnEnterKeyUp" Required="true" RequiredError="" />
                    <CategoryPicker @ref="_categoryPicker" />
                    <ProjectPicker @ref="_projectPicker" />
                    <MudDatePicker @ref="_dueDatePicker" Label="Due Date" @bind-Date="_dueDate" AutoClose="true">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(async () => await _dueDatePicker.ClearAsync())">Clear</MudButton>
                            <MudButton OnClick="@(async () => await _dueDatePicker.CloseAsync(false))">Cancel</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    <MudCheckBox T="bool" @bind-Checked="_highPriority" Size="Size.Small" Dense="true" Label="High Priority" Class="mt-5" />
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveTask">Save</MudButton>
                @if (_taskId != 0)
                {
                    <MudButton Variant="Variant.Outlined" OnClick="ResetForm" Class="ml-3">Cancel Edit</MudButton>
                }
            </MudCardActions>
        </MudCard>
    </MudFocusTrap>
    <MudPaper Class="mt-3 d-flex justify-center">
        <MudSwitch Checked="TaskListState.Value.UseArrows" T="bool" Label="Use Arrows to Move" Color="Color.Primary" CheckedChanged="OnUseArrowsChanged" />
    </MudPaper>
</MudPaper>

@code {
    private int _taskId { get; set; }
    private CategoryPicker _categoryPicker;
    private ProjectPicker _projectPicker;
    private string? _narrative { get; set; }
    private DateTime? _dueDate { get; set; }
    private bool _highPriority { get; set; }
    private int _status { get; set; }

    private bool _formIsValid;
    MudForm _taskForm;
    MudTextField<string> _narrativeFieldRef;
    MudDatePicker _dueDatePicker;

    protected override void OnInitialized()
    {
        SubscribeToAction<TaskListEditTaskAction>(action => EditTask(action.Task));
        base.OnInitialized();
    }

    private void OnUseArrowsChanged()
    {
        Dispatcher.Dispatch(new TaskListSaveUseArrowsAction(!TaskListState.Value.UseArrows));
    }

    private void EditTask(TaskListItem task)
    {
        _taskId = task.Id;
        _narrative = task.Narrative;
        _categoryPicker.SetCategory(task.CategoryId);
        _projectPicker.SetProject(task.ProjectId);
        _dueDate = task.Due.HasValue ? task.Due.Value.ToDateTime(TimeOnly.MinValue) : null;
        _highPriority = task.Priority == 1;
        _status = task.Status;
    }

    private async Task SaveOnEnterKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && _formIsValid)
        {
            await SaveTask();
        }
    }

    private async Task SaveTask()
    {
        if (string.IsNullOrWhiteSpace(_narrative)) return;

        var newTask = new TaskListItem
            {
                Id = _taskId,
                Narrative = _narrative,
                CategoryId = _categoryPicker.SelectedCategory?.Id,
                ProjectId = _projectPicker.SelectedProject?.Id,
                Status = _status,
                Priority = _highPriority ? 1 : 0,
                Due = _dueDate.HasValue ? DateOnly.FromDateTime(_dueDate.Value) : null
            };

        Dispatcher.Dispatch(new TaskListSaveTaskAction(newTask));
        await ResetForm();
        await _narrativeFieldRef.FocusAsync();
    }

    private async Task ResetForm()
    {
        await Task.Yield();
        _taskId = 0;
        _narrative = null;
        _highPriority = false;
        _dueDate = null;
        _status = TaskListItemStatus.ToDo;
        _categoryPicker.Reset();
        _projectPicker.Reset();
    }
}
