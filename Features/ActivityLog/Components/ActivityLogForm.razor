@inherits FluxorComponent

@inject IState<ActivityLogState> ActivityLogState
@inject IDispatcher Dispatcher

<MudPaper Class="pa-3 mb-3" Elevation="6">
    <MudFocusTrap DefaultFocus="DefaultFocus.None">
        <MudForm @ref="_activityLogForm" @bind-IsValid="@_formIsValid">
            <MudGrid>
                <MudItem xs="4">
                    <CategoryPicker @ref="_categoryPicker" />
                </MudItem>
                <MudItem xs="4">
                    <ProjectPicker @ref="_projectPicker" />
                </MudItem>
                <MudItem xs="4">
                    <MudDatePicker Label="Activity Date" @bind-Date="_activityDate" />
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="8">
                    <MudTextField @ref="_activityFieldRef" T="string" Label="Activity" @bind-Value="_activityTitle" Immediate="true" OnKeyUp="OnKeyUp" xs="6" Required="true" RequiredError=""/>
                </MudItem>
                <MudItem xs="2">
                    <MudNumericField @bind-Value="@_activityHours" Label="Hours" Min="0" Max="24" Variant="Variant.Text"></MudNumericField>
                </MudItem>
                <MudItem xs="2">
                    <MudNumericField @bind-Value="@_activityMinutes" Label="Minutes" Min="0" Max="59" Variant="Variant.Text"></MudNumericField>
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem xs="8"></MudItem>
                <MudItem xs="4" Style="text-align:right">
                    @if (_selectedId != 0)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="ResetActivityLogForm">Cancel Edit</MudButton>
                    }
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_formIsValid)" OnClick="SaveActivityLogItem" Class="ml-3">Save</MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudFocusTrap>
</MudPaper>

@code {

    MudForm _activityLogForm;
    CategoryPicker _categoryPicker;
    ProjectPicker _projectPicker;
    int _selectedId = 0;
    string _activityTitle = "";
    int _activityHours = 0;
    int _activityMinutes = 0;
    DateTime? _activityDate = DateTime.Now;
    bool _formIsValid;

    MudTextField<string> _activityFieldRef;

    protected override void OnInitialized()
    {
        SubscribeToAction<ActivityLogEditItemAction>(EditActivityLogItem);  
        base.OnInitialized();
    }

    private async Task OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && _formIsValid)
        {
            await SaveActivityLogItem();
        }
    }

    private async Task SaveActivityLogItem()
    {
        var timespan = new TimeSpan(hours: _activityHours, minutes: _activityMinutes, seconds: 0);
        var newActivity = new ActivityLogItem
            {
                Id = _selectedId,
                CategoryId = _categoryPicker.SelectedCategory?.Id,
                ProjectId = _projectPicker.SelectedProject?.Id,
                Title = _activityTitle,
                Date = _activityDate.HasValue ? DateOnly.FromDateTime(_activityDate.Value) : DateOnly.FromDateTime(DateTime.Now),
                Duration = timespan
            };

        await ResetActivityLogForm();
        Dispatcher.Dispatch(new ActivityLogSaveItemAction(newActivity));
    }

    private async Task ResetActivityLogForm()
    {
        // Leave Category, Project, and Date where they are
        // unless they're inactive
        // to make subsequent entries easier

        if (_categoryPicker.SelectedCategory is not null && !_categoryPicker.SelectedCategory.Active)
        {
            _categoryPicker.Reset();
        }

        if (_projectPicker.SelectedProject is not null && !_projectPicker.SelectedProject.Active)
        {
            _projectPicker.Reset();
        }

        _selectedId = 0;
        _activityTitle = "";
        _activityHours = 0;
        _activityMinutes = 0;
        _activityLogForm.ResetValidation();
        _formIsValid = false;

        await _activityFieldRef.FocusAsync();
    }

    private void EditActivityLogItem(ActivityLogEditItemAction action)
    {
        var activityLogItem = action.Item;

        _selectedId = action.CopyOnly ? 0 : activityLogItem.Id;
        _activityTitle = activityLogItem.Title;
        _activityHours = activityLogItem.Duration.Hours;
        _activityMinutes = activityLogItem.Duration.Minutes;
        _activityDate = activityLogItem.Date.ToDateTime(TimeOnly.MinValue);
        _categoryPicker.SetCategory(activityLogItem.CategoryId);
        _projectPicker.SetProject(activityLogItem.ProjectId);
        _activityLogForm.ResetValidation();
        StateHasChanged();
    }

}
